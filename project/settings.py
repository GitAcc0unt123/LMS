"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
from os.path import join
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'sjl%1om#!j@-z^ww%pih)_q4!7exx2cbm9p@^s+z#nohdkaboz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']

#SESSION_COOKIE_SECURE = True
#CSRF_COOKIE_SECURE = True
#SECURE_SSL_REDIRECT = True # redirect all non-HTTPS requests to HTTPS

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework.authtoken',

    'django_filters',
    'debug_toolbar',
    'drf_yasg',

    'LMS.apps.LmsConfig',
]

# global settings for a REST framework API
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],

    #'DEFAULT_PERMISSION_CLASSES': [
    #    'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    #    #'rest_framework.permissions.IsAuthenticated',
    #],

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,

    # сделать по умолчанию формат ответа json
    #'DEFAULT_RENDERER_CLASSES': (
    #    'rest_framework.renderers.JSONRenderer',
    #),
    #'DEFAULT_PARSER_CLASSES': (
    #    'rest_framework.parsers.JSONParser',
    #)
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'LMS.views.context_processor_notices',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# адреса MEDIA_URL и STATIC_URL будут работать только в режиме дебага. в production статику раздаёт nginx или другой веб-сервер
# Медиа-файлы — всё, что загружает пользователь на ваш сервер (автарки, фотки), т.е. пользовательский контент.
MEDIA_URL = '/media/'
MEDIA_ROOT = join(BASE_DIR, 'media')

# файлы, которые вы сами создавали: css-стили, js-скрипты, картинки для дизайна и т.п
# manage.py collectstatic - will copy all files from your static folders into the STATIC_ROOT directory
# STATIC_ROOT — указывает на изначально пустую папку, в которую будет собрана вся статика
STATIC_URL = '/static/'
STATIC_ROOT = join(BASE_DIR, 'static') 

# manage.py collectstatic добавить в директорию STATIC_ROOT копии указанных ниже директорий
#STATICFILES_DIRS = [
#    ('LMS', join(BASE_DIR, 'LMS', 'static', 'js'))
#]


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# for debug_toolbar
INTERNAL_IPS = [
    '127.0.0.1',
]


# celery settings
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379' # redis://0.0.0.0:6379
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_BEAT_SCHEDULE = {
   'check-executions-every-minute': {
    'task': 'LMS.celery_tasks.check_files',
    'schedule': crontab(minute='*/1'), # кажд. минуту
   },
   'delete-comments-notices-files-everyday': {
     'task': 'LMS.celery_tasks.everyday',
     'schedule': crontab(hour=3, minute=0), # кажд. день в 03:00
  },
}

# логирование
# https://docs.djangoproject.com/en/3.2/topics/logging/
# http://youtu.be/nAK-Tpc3NMI
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': join(BASE_DIR, 'log.log'),
            'formatter': 'simple',
        },
    },
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'loggers': {
        'LMS': {
            'handlers': ['file'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}


# LMS
TIMEOUT_COMMENT = timedelta(seconds=5)
TIMEOUT_TEST = timedelta(seconds=5)
TIMEOUT_TASK_AUTOMATIC = timedelta(seconds=5)
TIMEOUT_TASK_NONAUTOMATIC = timedelta(seconds=5)
DAILY_COMMENTS = 5
FILE_MAX_SIZE = 128 * 1024 * 1024


# улучшить запросы к БД
#LOGGING = {
#    'version': 1,
#    'handlers': {
#        'console': {
#            'class': 'logging.StreamHandler',
#        },
#    },
#    'loggers': {
#        'django.db.backends': {
#            'level': 'DEBUG',
#        },
#    },
#    'root': {
#        'handlers': ['console'],
#    }
#}